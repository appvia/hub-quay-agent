// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright (C) 2019  Rohith Jayawardene <gambol99@gmail.com>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permission Is the definition for a permission on a repository
// swagger:model Permission
type Permission struct {

	// The identifier for the identity applying the permission to
	// Required: true
	Name *string `json:"name"`

	// The level of access to be given to the identify (team, member or robot)
	//
	// Required: true
	// Enum: [admin none read write]
	Permission *string `json:"permission"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Permission) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var permissionTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","none","read","write"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionTypePermissionPropEnum = append(permissionTypePermissionPropEnum, v)
	}
}

const (

	// PermissionPermissionAdmin captures enum value "admin"
	PermissionPermissionAdmin string = "admin"

	// PermissionPermissionNone captures enum value "none"
	PermissionPermissionNone string = "none"

	// PermissionPermissionRead captures enum value "read"
	PermissionPermissionRead string = "read"

	// PermissionPermissionWrite captures enum value "write"
	PermissionPermissionWrite string = "write"
)

// prop value enum
func (m *Permission) validatePermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, permissionTypePermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validatePermission(formats strfmt.Registry) error {

	if err := validate.Required("permission", "body", m.Permission); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermissionEnum("permission", "body", *m.Permission); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
