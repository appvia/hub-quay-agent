// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright (C) 2019  Rohith Jayawardene <gambol99@gmail.com>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "an agent used to provision and configure repositories in quay",
    "title": "hub-quay-agent",
    "contact": {
      "name": "admin@appvia.io",
      "url": "https://github.com/appvia/hub-quay-agent",
      "email": "support@appvia.io"
    },
    "version": "v1beta"
  },
  "basePath": "/api/v1beta",
  "paths": {
    "/alive": {
      "get": {
        "security": [],
        "description": "Returns health and status information of the API daemon and\nrelated components such as the runtime.\n",
        "summary": "Get health of Agent",
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      }
    },
    "/healthz/{namespace}": {
      "get": {
        "description": "Request the agent for validate the health of the agent\n",
        "summary": "Perform an intelligent health check on the agent",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      }
    },
    "/registry/{namespace}": {
      "get": {
        "description": "Used to retrieve a repository from the registry\n",
        "summary": "Retrieves a list of respositories witin the registry",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/repositories"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      }
    },
    "/registry/{namespace}/{name}": {
      "get": {
        "description": "Used to retrieve a repository from the registry\n",
        "summary": "Retrieves a list of respositories witin the registry",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/repository"
          },
          "404": {
            "$ref": "#/responses/apierror"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      },
      "put": {
        "description": "Used to create a new repository or update a repository in the registry\n",
        "summary": "Create a new repository within Quay",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/name"
          },
          {
            "$ref": "#/parameters/repository"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/repository"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      },
      "delete": {
        "description": "Deletes the repository, the associated user policy and all images associated\n",
        "summary": "Responsible for deleting a repository",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the repository from the organization"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      }
    },
    "/robots/{namespace}": {
      "get": {
        "description": "Used to retrieve a list of robot accounts and the permissions they\nhave on the repositories\n",
        "summary": "Retrieves a list of robot accounts from within the registry",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/robots"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      }
    },
    "/robots/{namespace}/{name}": {
      "get": {
        "description": "Used to retrieve a list of robot accounts and the permissions they\nhave on the repositories\n",
        "summary": "Retrieves a list of robot accounts from within the registry",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/robot"
          },
          "404": {
            "$ref": "#/responses/apierror"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      },
      "put": {
        "description": "Used to retrieve a list of robot accounts and the permissions they\nhave on the repositories\n",
        "summary": "Retrieves a list of robot accounts from within the registry",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/name"
          },
          {
            "$ref": "#/parameters/robot"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/robot"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      },
      "delete": {
        "description": "Used to delete a robot account and all permissions from a robot account\n",
        "summary": "Deletes a robot account from the organization",
        "parameters": [
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/robot"
          },
          "default": {
            "$ref": "#/responses/apierror"
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "description": "Is a generic error event returned when the we have an internal error",
      "type": "object",
      "required": [
        "reason"
      ],
      "properties": {
        "detail": {
          "description": "Additional details related to the error",
          "type": "string"
        },
        "reason": {
          "description": "A human readable description used to define what error has occured",
          "type": "string"
        }
      }
    },
    "Object": {
      "description": "The definition of a object",
      "type": "object",
      "required": [
        "name",
        "namespace"
      ],
      "properties": {
        "name": {
          "description": "A globally unique human readible resource name",
          "type": "string"
        },
        "namespace": {
          "description": "A namespace for the resource, which in this case maps on the organization",
          "type": "string"
        },
        "signature": {
          "description": "A cryptographic signature used to verify the request payload",
          "type": "string"
        }
      }
    },
    "Permission": {
      "description": "Is the definition for a permission on a repository",
      "type": "object",
      "required": [
        "name",
        "permission"
      ],
      "properties": {
        "name": {
          "description": "The identifier for the identity applying the permission to",
          "type": "string"
        },
        "permission": {
          "description": "The level of access to be given to the identify (team, memeber or robot)",
          "type": "string",
          "enum": [
            "admin",
            "none",
            "read",
            "write"
          ]
        }
      }
    },
    "Principal": {
      "type": "string"
    },
    "Repository": {
      "description": "The resource definition for a repository in the registry",
      "type": "object",
      "required": [
        "spec"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/RepositorySpec"
        }
      }
    },
    "RepositoryList": {
      "description": "A list of repositories found",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Repository"
          }
        }
      }
    },
    "RepositorySpec": {
      "description": "The definitions for a repository",
      "type": "object",
      "required": [
        "visibility"
      ],
      "properties": {
        "description": {
          "description": "A description about what the image is used for",
          "type": "string"
        },
        "members": {
          "description": "A list of members whom has access to the repository",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "robots": {
          "description": "A list of robot accounts who access to the repository",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "tags": {
          "description": "A collection of tags associated to the image",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "url": {
          "description": "The docker pull url for this image",
          "type": "string"
        },
        "visibility": {
          "description": "The visibility of the repository in the registry",
          "type": "string",
          "enum": [
            "internal",
            "private",
            "public"
          ]
        }
      }
    },
    "Robot": {
      "description": "The resource definition for a robot account",
      "type": "object",
      "required": [
        "spec"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/RobotSpec"
        }
      }
    },
    "RobotList": {
      "description": "A list of robot accounts",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Robot"
          }
        }
      }
    },
    "RobotSpec": {
      "description": "The resource specification of a robot account",
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "description": "A summary of what the robot account is for",
          "type": "string"
        },
        "password": {
          "description": "The password associated to the robot account",
          "type": "string"
        },
        "tags": {
          "description": "A collection of tags associated to the robot account",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "token": {
          "description": "The token associated to the the robot account",
          "type": "string"
        },
        "username": {
          "description": "The username associated to the robot account",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "authinfo": {
      "type": "string",
      "description": "An authentication context to speak to the backend of behalf of the Hub",
      "name": "X-AuthInfo",
      "in": "header"
    },
    "name": {
      "type": "string",
      "description": "The name of the repository you are acting upon",
      "name": "name",
      "in": "path",
      "required": true
    },
    "namespace": {
      "type": "string",
      "description": "The namespace of the repostory",
      "name": "namespace",
      "in": "path",
      "required": true
    },
    "repository": {
      "description": "The repository definition we are acting on",
      "name": "repository",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Repository"
      }
    },
    "robot": {
      "description": "The definition of a robot account within the registry",
      "name": "robot",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Robot"
      }
    }
  },
  "responses": {
    "apierror": {
      "description": "A generic erorr returned by the api",
      "schema": {
        "$ref": "#/definitions/APIError"
      }
    },
    "notfound": {
      "description": "The resource does not exist"
    },
    "repositories": {
      "description": "A collection repositories found in the registry",
      "schema": {
        "$ref": "#/definitions/RepositoryList"
      }
    },
    "repository": {
      "description": "The specification of a repository in the registry",
      "schema": {
        "$ref": "#/definitions/Repository"
      }
    },
    "robot": {
      "description": "Returning the status of a robot account",
      "schema": {
        "$ref": "#/definitions/Robot"
      }
    },
    "robots": {
      "description": "Returning a list of robot accounts",
      "schema": {
        "$ref": "#/definitions/RobotList"
      }
    }
  },
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "apikey": null
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "an agent used to provision and configure repositories in quay",
    "title": "hub-quay-agent",
    "contact": {
      "name": "admin@appvia.io",
      "url": "https://github.com/appvia/hub-quay-agent",
      "email": "support@appvia.io"
    },
    "version": "v1beta"
  },
  "basePath": "/api/v1beta",
  "paths": {
    "/alive": {
      "get": {
        "security": [],
        "description": "Returns health and status information of the API daemon and\nrelated components such as the runtime.\n",
        "summary": "Get health of Agent",
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/healthz/{namespace}": {
      "get": {
        "description": "Request the agent for validate the health of the agent\n",
        "summary": "Perform an intelligent health check on the agent",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/registry/{namespace}": {
      "get": {
        "description": "Used to retrieve a repository from the registry\n",
        "summary": "Retrieves a list of respositories witin the registry",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A collection repositories found in the registry",
            "schema": {
              "$ref": "#/definitions/RepositoryList"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/registry/{namespace}/{name}": {
      "get": {
        "description": "Used to retrieve a repository from the registry\n",
        "summary": "Retrieves a list of respositories witin the registry",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The specification of a repository in the registry",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "404": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "put": {
        "description": "Used to create a new repository or update a repository in the registry\n",
        "summary": "Create a new repository within Quay",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "The repository definition we are acting on",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specification of a repository in the registry",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the repository, the associated user policy and all images associated\n",
        "summary": "Responsible for deleting a repository",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the repository from the organization"
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/robots/{namespace}": {
      "get": {
        "description": "Used to retrieve a list of robot accounts and the permissions they\nhave on the repositories\n",
        "summary": "Retrieves a list of robot accounts from within the registry",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returning a list of robot accounts",
            "schema": {
              "$ref": "#/definitions/RobotList"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/robots/{namespace}/{name}": {
      "get": {
        "description": "Used to retrieve a list of robot accounts and the permissions they\nhave on the repositories\n",
        "summary": "Retrieves a list of robot accounts from within the registry",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returning the status of a robot account",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "404": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "put": {
        "description": "Used to retrieve a list of robot accounts and the permissions they\nhave on the repositories\n",
        "summary": "Retrieves a list of robot accounts from within the registry",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "The definition of a robot account within the registry",
            "name": "robot",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returning the status of a robot account",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "delete": {
        "description": "Used to delete a robot account and all permissions from a robot account\n",
        "summary": "Deletes a robot account from the organization",
        "parameters": [
          {
            "type": "string",
            "description": "The namespace of the repostory",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository you are acting upon",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returning the status of a robot account",
            "schema": {
              "$ref": "#/definitions/Robot"
            }
          },
          "default": {
            "description": "A generic erorr returned by the api",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "description": "Is a generic error event returned when the we have an internal error",
      "type": "object",
      "required": [
        "reason"
      ],
      "properties": {
        "detail": {
          "description": "Additional details related to the error",
          "type": "string"
        },
        "reason": {
          "description": "A human readable description used to define what error has occured",
          "type": "string"
        }
      }
    },
    "Object": {
      "description": "The definition of a object",
      "type": "object",
      "required": [
        "name",
        "namespace"
      ],
      "properties": {
        "name": {
          "description": "A globally unique human readible resource name",
          "type": "string"
        },
        "namespace": {
          "description": "A namespace for the resource, which in this case maps on the organization",
          "type": "string"
        },
        "signature": {
          "description": "A cryptographic signature used to verify the request payload",
          "type": "string"
        }
      }
    },
    "Permission": {
      "description": "Is the definition for a permission on a repository",
      "type": "object",
      "required": [
        "name",
        "permission"
      ],
      "properties": {
        "name": {
          "description": "The identifier for the identity applying the permission to",
          "type": "string"
        },
        "permission": {
          "description": "The level of access to be given to the identify (team, memeber or robot)",
          "type": "string",
          "enum": [
            "admin",
            "none",
            "read",
            "write"
          ]
        }
      }
    },
    "Principal": {
      "type": "string"
    },
    "Repository": {
      "description": "The resource definition for a repository in the registry",
      "type": "object",
      "required": [
        "spec"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/RepositorySpec"
        }
      }
    },
    "RepositoryList": {
      "description": "A list of repositories found",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Repository"
          }
        }
      }
    },
    "RepositorySpec": {
      "description": "The definitions for a repository",
      "type": "object",
      "required": [
        "visibility"
      ],
      "properties": {
        "description": {
          "description": "A description about what the image is used for",
          "type": "string"
        },
        "members": {
          "description": "A list of members whom has access to the repository",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "robots": {
          "description": "A list of robot accounts who access to the repository",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        },
        "tags": {
          "description": "A collection of tags associated to the image",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "url": {
          "description": "The docker pull url for this image",
          "type": "string"
        },
        "visibility": {
          "description": "The visibility of the repository in the registry",
          "type": "string",
          "enum": [
            "internal",
            "private",
            "public"
          ]
        }
      }
    },
    "Robot": {
      "description": "The resource definition for a robot account",
      "type": "object",
      "required": [
        "spec"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/RobotSpec"
        }
      }
    },
    "RobotList": {
      "description": "A list of robot accounts",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Object"
        }
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Robot"
          }
        }
      }
    },
    "RobotSpec": {
      "description": "The resource specification of a robot account",
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "description": "A summary of what the robot account is for",
          "type": "string"
        },
        "password": {
          "description": "The password associated to the robot account",
          "type": "string"
        },
        "tags": {
          "description": "A collection of tags associated to the robot account",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "token": {
          "description": "The token associated to the the robot account",
          "type": "string"
        },
        "username": {
          "description": "The username associated to the robot account",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "authinfo": {
      "type": "string",
      "description": "An authentication context to speak to the backend of behalf of the Hub",
      "name": "X-AuthInfo",
      "in": "header"
    },
    "name": {
      "type": "string",
      "description": "The name of the repository you are acting upon",
      "name": "name",
      "in": "path",
      "required": true
    },
    "namespace": {
      "type": "string",
      "description": "The namespace of the repostory",
      "name": "namespace",
      "in": "path",
      "required": true
    },
    "repository": {
      "description": "The repository definition we are acting on",
      "name": "repository",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Repository"
      }
    },
    "robot": {
      "description": "The definition of a robot account within the registry",
      "name": "robot",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Robot"
      }
    }
  },
  "responses": {
    "apierror": {
      "description": "A generic erorr returned by the api",
      "schema": {
        "$ref": "#/definitions/APIError"
      }
    },
    "notfound": {
      "description": "The resource does not exist"
    },
    "repositories": {
      "description": "A collection repositories found in the registry",
      "schema": {
        "$ref": "#/definitions/RepositoryList"
      }
    },
    "repository": {
      "description": "The specification of a repository in the registry",
      "schema": {
        "$ref": "#/definitions/Repository"
      }
    },
    "robot": {
      "description": "Returning the status of a robot account",
      "schema": {
        "$ref": "#/definitions/Robot"
      }
    },
    "robots": {
      "description": "Returning a list of robot accounts",
      "schema": {
        "$ref": "#/definitions/RobotList"
      }
    }
  },
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "apikey": []
    }
  ]
}`))
}
