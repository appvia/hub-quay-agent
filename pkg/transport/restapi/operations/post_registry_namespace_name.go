// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright (C) 2019  Rohith Jayawardene <gambol99@gmail.com>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostRegistryNamespaceNameHandlerFunc turns a function with the right signature into a post registry namespace name handler
type PostRegistryNamespaceNameHandlerFunc func(PostRegistryNamespaceNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRegistryNamespaceNameHandlerFunc) Handle(params PostRegistryNamespaceNameParams) middleware.Responder {
	return fn(params)
}

// PostRegistryNamespaceNameHandler interface for that can handle valid post registry namespace name params
type PostRegistryNamespaceNameHandler interface {
	Handle(PostRegistryNamespaceNameParams) middleware.Responder
}

// NewPostRegistryNamespaceName creates a new http.Handler for the post registry namespace name operation
func NewPostRegistryNamespaceName(ctx *middleware.Context, handler PostRegistryNamespaceNameHandler) *PostRegistryNamespaceName {
	return &PostRegistryNamespaceName{Context: ctx, Handler: handler}
}

/*PostRegistryNamespaceName swagger:route POST /registry/{namespace}/{name} postRegistryNamespaceName

Create a new repository within Quay

Used to create a new repository or update a repository in the registry


*/
type PostRegistryNamespaceName struct {
	Context *middleware.Context
	Handler PostRegistryNamespaceNameHandler
}

func (o *PostRegistryNamespaceName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRegistryNamespaceNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
