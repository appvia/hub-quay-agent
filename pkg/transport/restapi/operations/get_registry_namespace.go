// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright (C) 2019  Rohith Jayawardene <gambol99@gmail.com>
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRegistryNamespaceHandlerFunc turns a function with the right signature into a get registry namespace handler
type GetRegistryNamespaceHandlerFunc func(GetRegistryNamespaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRegistryNamespaceHandlerFunc) Handle(params GetRegistryNamespaceParams) middleware.Responder {
	return fn(params)
}

// GetRegistryNamespaceHandler interface for that can handle valid get registry namespace params
type GetRegistryNamespaceHandler interface {
	Handle(GetRegistryNamespaceParams) middleware.Responder
}

// NewGetRegistryNamespace creates a new http.Handler for the get registry namespace operation
func NewGetRegistryNamespace(ctx *middleware.Context, handler GetRegistryNamespaceHandler) *GetRegistryNamespace {
	return &GetRegistryNamespace{Context: ctx, Handler: handler}
}

/*GetRegistryNamespace swagger:route GET /registry/{namespace} getRegistryNamespace

Retrieves a list of respositories witin the registry

Used to retrieve a repository from the registry


*/
type GetRegistryNamespace struct {
	Context *middleware.Context
	Handler GetRegistryNamespaceHandler
}

func (o *GetRegistryNamespace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRegistryNamespaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
